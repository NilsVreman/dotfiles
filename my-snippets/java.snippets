priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

def write_docs(snip, args, init_text, ret_type = '', raised = ''):
	snip.rv = ''
	snip.rv += '/**'
	snip += ' * ' + init_text
	if args or (ret_type and ret_type != 'void') or raised:
		snip += ' *'
	if args:
		snip += ' * @param:'
		for i in args:
			snip += " *     {} ({}): TO WRITE".format(i[1], i[0])
	if ret_type and ret_type != 'void':
		snip += ' * @return:'
		snip += ' *     {}: TO WRITE'.format(ret_type)
	if raised:
		snip += ' * @raise: {}'.format(raised)
	snip += ' */'
endglobal

###################################
# ----------- Try-Catch -----------
###################################

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e) {
	e.printStackTrace();
}
endsnippet

snippet try "try-catch statement" b
try {
	$1${VISUAL}
} catch (${2:Exception} ${3:e}) {
	${4:$3.printStackTrace();}
}
endsnippet

snippet tryf "Try-catch-finally statement" b
try {
	$1${VISUAL}
} catch (${2:Exception} ${3:e}) {
	${4:$3.printStackTrace();}
} finally {
	$0
}
endsnippet

###################################
# ----------- classes -----------
###################################

snippet interface "interface" b
/**
 * interface $1:
 *
 * ${2:Class Docstring}
 */
public interface ${1:`!p snip.rv = snip.basename or "untitled"`} {

	$0
}
endsnippet

snippet interfacee "interface" b
/**
 * interface $1 extends $2:
 *
 * ${3:Class Docstring}
 */
public interface ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:Interface} {

	$0
}
endsnippet

snippet class "class" b
/**
 * $1 class $2:
 *
 * ${3:Class Docstring}
 */
public ${1:abstract} class ${2:`!p
snip.rv = snip.basename or "untitled"`} {

	$0
}
endsnippet

snippet classei "class extends+implements" b
/**
 * $1 class $2 extends $3 implements $4:
 *
 * ${5:Class Docstring}
 */
public ${1:abstract} class ${2:`!p
snip.rv = snip.basename or "untitled"`} extends ${3:Parent} implements ${4:Interface} {

	$0
}
endsnippet

snippet classe "class extends" b
/**
 * $1 class $2 extends $3:
 *
 * ${4:Class Docstring}
 */
public ${1:abstract} class ${2:`!p
snip.rv = snip.basename or "untitled"`} extends ${3:Parent} {

	$0
}
endsnippet

snippet classi "class implements" b
/**
 * $1 class $2 implements $3:
 *
 * ${4:Class Docstring}
 */
public ${1:abstract} class ${2:`!p
snip.rv = snip.basename or "untitled"`} implements ${3:Interface} {

	$0
}
endsnippet

snippet cn "Constructor without anything" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet constr "class constructor with fields and comments" b
`!p snip.rv = ''
args = getArgs(t[1])
for idx, i in enumerate(args):
	if idx == 0:
		snip.rv += 'private ' + i[0] + ' ' + i[1]+ ';'
	else:
		snip += 'private ' + i[0] + ' ' + i[1]+ ';'
if args:
	snip += ''
	snip += ''
`/**
 * Constructor for the class `!p snip.rv += snip.basename or 'unknown'`
`!p snip.rv = ''
args = getArgs(t[1])
if args:
	snip.rv += ' *'
	snip += ' * @param:'
	for i in args:
		snip += " *     {} ({}): TO WRITE".format(i[1], i[0])
	snip += ' */'
else:
	snip.rv = ' */'
`
public `!p snip.rv += snip.basename or "unknown"`($1) {`!p snip.rv = ''
args = getArgs(t[1])
snip >> 1
for i in args:
	snip += "this.{} = {};".format(i[1], i[1])`
	$0
}
endsnippet

snippet pconstr "plain class constructor with comments" b
/**
 * Constructor for the class `!p snip.rv += snip.basename or 'unknown'`
`!p snip.rv = ''
args = getArgs(t[1])
if args:
	snip.rv += ' *'
	snip += ' * @param:'
	for i in args:
		snip += " *     {} ({}): TO WRITE".format(i[1], i[0])
	snip += ' */'
else:
	snip.rv = ' */'`
public `!p snip.rv += snip.basename or "unknown"`($1) {
	$0
}
endsnippet

###################################
# ----------- loops -----------
###################################

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet dowh "while" b
do`!p np(snip)`{
	$0
} while ($1);
endsnippet
 
###################################
# --------- Collections ----------
###################################

snippet list "Collections List"
List<${1:Object}> ${2:listName}${3: = new ${4:Array}List<>()};$0
endsnippet

snippet map "Collections Map"
Map<${1:Object}, ${2:Object}> ${3:mapName}${4: = new ${5:Hash}Map<>()};$0
endsnippet

snippet set "Collections Set"
Set<${1:String}> ${2:setName}${3: = new ${4:Hash}Set<>()};$0
endsnippet

###################################
# ---------- Methods ------------
###################################

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet psvm "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet deft "method with comments (throws)" b
`!p args = getArgs(t[4])
write_docs(snip, args, "Method {}:".format(t[3]), ret_type = t[2], raised = t[5])`
${1:public} ${2:void} ${3:methodName}($4) throws ${5:ThrownException} {
	$0`!p snip.rv = ''
if t[2] != 'void':
	snip += '	return Optional.empty();'`
}
endsnippet

snippet deff "method without comments" b
${1:public} ${2:void} ${3:methodName}($4) {
	$0`!p snip.rv = ''
if t[2] != 'void':
	snip += '	return Optional.empty();'`
}
endsnippet

snippet defs "synchronized method with comments" b
`!p args = getArgs(t[4])
write_docs(snip, args, "Synchronized method {}:".format(t[3]), ret_type = t[2], raised = t[5])`
${1:public} synchronized ${2:void} ${3:methodName}($4) {
	$0`!p snip.rv = ''
if t[2] != 'void':
	snip += '	return Optional.empty();'`
}
endsnippet

snippet def "Method With comments" b
`!p args = getArgs(t[4])
write_docs(snip, args, "Method {}:".format(t[3]), ret_type = t[2], raised = '')`
${1:public} ${2:void} ${3:methodName}($4) {
	$0`!p snip.rv = ''
if t[2] != 'void':
	snip += '	return Optional.empty();'`
}
endsnippet

snippet defget "getter" b
`!p write_docs(snip, [], "Get-function get{}:".format(t[2]), ret_type = t[1], raised = '')`
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet defset "setter" b
`!p args = getArgs(t[2])
write_docs(snip, args, "Set-function set{}:".format(t[1]), ret_type = '', raised = '')`
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

###################################
# ---------- print ------------
###################################

snippet print "print" w
System.out.print($1);$0
endsnippet

snippet println "println" w
System.out.println($1);$0
endsnippet

# vim:ft=snippets:
