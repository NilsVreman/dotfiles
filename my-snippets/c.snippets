priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet def "#define ..."
#define ${1:SYMBOL} ${2:value}$0
endsnippet

snippet todo "TODO"
/* ${1:${2:TODO}: ${3:Description here}} */$0
endsnippet

snippet inc "#include <...h>"
#include <${1:stdio}.h>$0
endsnippet

snippet incf "#include '...h'"
#include "${1:myfile}.h"$0
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet mainn "main(void) (main)"
int main(${1:void}) {
	$0
	return 0;
}
endsnippet

snippet main "main() (main)"
int main(${1:int argc, char *argv[]}) {
	$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${1:int }${2:i} = 0; ${3:$2 < n}; ${4:$2++}) {
	$0
}
endsnippet

snippet forg "for loop (for)"
for (${1:initialization}; ${2:condition}; ${3:increment/decrement}) {
	$0
}
endsnippet

snippet do "do-while loop"
do {
	$0
} while (${1:condition});
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:condition}) {
	$0
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:data}
};
endsnippet

### Functions ###

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

snippet funf "function" b
${1:void} ${2:function_name}(${3:void}) {
	$0
}
endsnippet

snippet funpf "function prototype" b
${1:void} ${2:function_name}(${3:void});$0
endsnippet

#post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet head "File Header" b
/*****************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${1:Author name}  
* Created:          `date +%m/%d/%y` 
* Description:      ${2:File Description}
*****************************************************************************/
${0}
endsnippet

#post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet fun "Function with Header" 
/*****************************************************************************
* Function:         $2
* Description:      $4
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[3])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $1
* Error:            $5
*****************************************************************************/
${1:void} ${2:function_name}(${3:void}) {
	$0
}
endsnippet

snippet funp "Function prototype with Header" 
/*****************************************************************************
* Function:         $2
* Description:      $4
* Where:`!p 
snip.rv = ""
snip >> 2

args = get_args(t[3])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $1
* Error:            $5
*****************************************************************************/
${1:void} ${2:function_name}(${3:void});$0
endsnippet
# vim:ft=snippets:
