#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet fn "fn name(?) -> ? {}"
fn ${1:function_name}(${2:arguments})${3: -> ${4:Result<Some, Error>}} {
	$0
}
endsnippet

snippet fni "fn name(?) -> ?;"
fn ${1:function_name}(${2:arguments})${3: -> ${4:Result<Some, Error>}};
endsnippet

snippet pfn "pub fn name(?) -> ? {}"
pub fn ${1:function_name}(${2:arguments})${3: -> ${4:Result<Some, Error>}} {
	$0
}
endsnippet

snippet afn "async fn name(?) -> ? {}"
async fn ${1:function_name}(${2:arguments})${3: -> ${4:Result<Some, Error>}} {
	$0
}
endsnippet

snippet pafn "pub async fn name(?) -> ? {}"
pub async fn ${1:function_name}(${2:arguments})${3: -> ${4:Result<Some, Error>}} {
	$0
}
endsnippet

snippet print "print!(..)" i
print!("${1:String}"${2:, ${3:alt_args}});$0
endsnippet

snippet println "println!(..)" i
println!("${1:String}"${2:, ${3:alt_args}});$0
endsnippet

snippet fmt "format!(..)"
format!("${1:String}"${2:, ${3:alt_args}});$0
endsnippet

snippet .it ".iter()" i
.iter()$0
endsnippet

snippet "st(ruct)?" "Struct" br
struct ${1:StructName}${2:<${3:T}>}${4: {
	$0
}}
endsnippet

snippet "pst(ruct)?" "public Struct" br
pub struct ${1:StructName}${2:<${3:T}>}${4: {
	$0
}}
endsnippet

snippet "en(um)?" "enum" br
enum ${1:EnumName}${2:<${3:T}>} {
	$0
}
endsnippet

snippet "pen(um)?" "public enum" br
pub enum ${1:EnumName}${2:<${3:T}>} {
	$0
}
endsnippet

snippet "tr(ait)?" "trait" br
trait ${1:TraitName} {
	$0
}
endsnippet

snippet "ptr(ait)?" "public trait" br
pub trait ${1:TraitName} {
	$0
}
endsnippet

snippet impl "Struct/Trait implementation" b
impl ${1:Type/Trait}${2: for ${3:Type}} {
	$0
}
endsnippet

snippet use "use case"
use ${1:${2:std}::${3:library}};$0
endsnippet

snippet ifl "if let" b
if let ${1:Some(${2:val})} = ${3:val} {
	${4:Expr}
}$0
endsnippet

snippet ifle "if let else" b
if let ${1:Some(${2:val})} = ${3:val} {
	${5:Expr}
}${4: else {
	${6:Else-Expr}
}}$0
endsnippet

snippet mod "mod" b
mod ${1:mod_name}${2: {
	$0
}}
endsnippet

snippet pmod "pub mod" b
pub mod ${1:mod_name}${2: {
	$0
}}
endsnippet

# vim:ft=snippets:
